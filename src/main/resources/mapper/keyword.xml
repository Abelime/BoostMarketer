<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="camel.BoostMarketer.keyword.mapper.KeywordMapper">
    <sql id="selectUserIdByEmail">
        SELECT id FROM user WHERE email = #{email}
    </sql>

    <!--  키워드 등록(사전)  -->
    <insert id="registerKeywordDict" parameterType="KeywordDto" useGeneratedKeys="true" keyProperty="keywordId">
        INSERT INTO keyword_dict (keyword_name, month_search_pc, month_search_mobile)
        SELECT #{keywordName}, #{monthSearchPc},  #{monthSearchMobile}
        FROM DUAL
        WHERE NOT EXISTS (
            SELECT 1
             FROM keyword_dict
            WHERE keyword_name = #{keywordName}
        )
        <selectKey resultType="Long" keyProperty="keywordId" order="AFTER">
            SELECT keyword_id
            FROM keyword_dict
            WHERE keyword_name = #{keywordName}
        </selectKey>
    </insert>

    <!--  키워드 등록(유저)  -->
    <insert id="registerUserKeyword" parameterType="map">
        INSERT INTO user_keywords (user_id, keyword_id, category_id)
        SELECT (<include refid="selectUserIdByEmail"/>),
               #{keywordDto.keywordId},
               #{keywordDto.categoryId}
        FROM DUAL
        WHERE NOT EXISTS (SELECT 1
                          FROM user_keywords
                          WHERE keyword_id = #{keywordDto.keywordId}
                            AND user_id = (<include refid="selectUserIdByEmail"/>))
    </insert>

    <!--  키워드 순위 정보 등록  -->
    <insert id="registerKeywordRank" parameterType="java.util.List">
        INSERT INTO keyword_rank (post_no, keyword_id, rank_pc, total_search_exposure)
        <foreach item="item" collection="list" separator="UNION ALL">
            SELECT #{item.postNo}, #{item.keywordId}, #{item.rankPc} , #{item.totalSearchExposure}
            FROM DUAL
            WHERE NOT EXISTS (
                SELECT 1
                 FROM keyword_rank
                WHERE post_no = #{item.postNo}
                  AND keyword_id = #{item.keywordId}
            )
        </foreach>
    </insert>

    <!--  키워드 순위 정보 등록 및 업데이트  -->
    <update id="upsertKeywordRank" parameterType="java.util.List">
        REPLACE INTO keyword_rank (post_no, keyword_id, rank_pc, total_search_exposure)
        <foreach item="item" collection="list" separator=" UNION ALL ">
            SELECT #{item.postNo}, #{item.keywordId}, #{item.rankPc}, #{item.totalSearchExposure}
        </foreach>
    </update>

    <!--  키워드 정보 조회  -->
    <select id="selectKeywordInfo" parameterType="String" resultType="KeywordDto">
        SELECT kd.keyword_id,
               kd.keyword_name,
               uk.category_id,
               kd.month_search_pc,
               kd.month_search_mobile,
        month_search_pc + month_search_mobile AS total_search,
               COALESCE(kr.rank_pc_5, 0)      AS rank_pc_5,
               COALESCE(kr.rank_pc_10, 0)     AS rank_pc_10,
               rank_pc_cnt,
               uk.keyword_fix,
        (SELECT count(*)
          FROM keyword_rank
         WHERE keyword_id = kd.keyword_id
          AND total_search_exposure >0)       AS total_search_exposure
        FROM keyword_dict kd
                 INNER JOIN
             user_keywords uk ON kd.keyword_id = uk.keyword_id
                 INNER JOIN
                 (<include refid="selectUserIdByEmail"/>) u ON uk.user_id = u.id
                <if test="categoryId != 0">
                    AND uk.category_id = #{categoryId}
                </if>
                 LEFT JOIN
        <![CDATA[
             (SELECT keyword_id,
                     COUNT(CASE WHEN rank_pc > 0 AND rank_pc <= 5 THEN 1 END)          AS rank_pc_5,
                     COUNT(CASE WHEN rank_pc > 5 AND rank_pc <= 10 THEN 1 END)         AS rank_pc_10,
                     COUNT(rank_pc) as rank_pc_cnt
        ]]>
              FROM keyword_rank
              WHERE post_no IN (SELECT post_no
                                FROM blog_post
                                WHERE blog_id IN (SELECT blog_id
                                                  FROM blog
                                                  WHERE user_id = (<include refid="selectUserIdByEmail"/>)))
              GROUP BY keyword_id) kr ON kd.keyword_id = kr.keyword_id
        order by uk.keyword_fix
        <choose>
            <when test="sort == 'category'">
                ,uk.category_id
            </when>
            <when test="sort == 'highSearch'">
                ,total_search desc
            </when>
            <when test="sort == 'lowSearch'">
                ,total_search
            </when>
            <when test="sort == 'highRank'">
                ,rank_pc_cnt desc ,rank_pc_5 desc, rank_pc_10 desc
            </when>
            <when test="sort == 'lowRank'">
                ,rank_pc_cnt, rank_pc_5, rank_pc_10
            </when>
            <when test="sort == 'highExposure'">
                ,total_search_exposure desc
            </when>
            <when test="sort == 'lowExposure'">
                ,total_search_exposure
            </when>
        </choose>
        , uk.updated_at desc
        </select>

    <!--  키워드 사전 삭제  -->
    <delete id="deleteKeyDict" parameterType="map">
        DELETE
        FROM keyword_dict
        WHERE keyword_id IN
            <foreach item="keywordId" collection="keywordIds" open="(" separator="," close=")">
                #{keywordId}
            </foreach>
        AND NOT EXISTS (
            SELECT 1
            FROM user_keywords
            WHERE user_id != #{id}
              AND keyword_id IN
                <foreach item="keywordId" collection="keywordIds" open="(" separator="," close=")">
                    #{keywordId}
                </foreach>
        )
    </delete>

    <!--  키워드 순위 삭제  -->
    <delete id="deleteKeyRank1" parameterType="map">
        DELETE
        FROM keyword_rank
        WHERE keyword_id IN
        <foreach item="keywordId" collection="keywordIds" open="(" separator="," close=")">
            #{keywordId}
        </foreach>
        AND post_no in (    SELECT post_no
                            FROM blog_post bp
                            INNER JOIN blog b ON (bp.blog_id = b.blog_id)
                            WHERE b.user_id = #{id}
                            AND bp.blog_id NOT IN (SELECT blog_id
                                                  FROM blog
                                                  WHERE user_id != #{id})
        )
    </delete>

    <delete id="deleteKeyRank2" parameterType="map">
        DELETE
        FROM keyword_rank
        WHERE keyword_id IN
        <foreach item="keywordId" collection="keywordIds" open="(" separator="," close=")">
            #{keywordId}
        </foreach>
          AND NOT EXISTS (SELECT 1
                          FROM user_keywords
                          WHERE user_id != #{id}
                            AND keyword_id IN
                            <foreach item="keywordId" collection="keywordIds" open="(" separator="," close=")">
                                #{keywordId}
                            </foreach>
                          )
    </delete>

    <!--  유저 키워드 삭제  -->
    <delete id="deleteUserKey" parameterType="map">
        DELETE
        FROM user_keywords
        WHERE user_id = #{id}
        AND keyword_id IN
          <foreach item="keywordId" collection="keywordIds" open="(" separator="," close=")">
              #{keywordId}
          </foreach>
    </delete>

    <!--  키워드 수, 상위노출 키워드 수  -->
    <select id="selectKeywordCntInfo" parameterType="String" resultType="map">
        SELECT
            (SELECT COUNT(*)
             FROM user_keywords uk
             WHERE uk.user_id = (<include refid="selectUserIdByEmail"/>)
               <if test="categoryId != 0">
                   AND uk.category_id = #{categoryId}
               </if>
            ) AS keywordCount,
            (SELECT COUNT(DISTINCT (kr.keyword_id))
             FROM keyword_rank kr
             WHERE kr.keyword_id IN (SELECT keyword_id
                                     FROM user_keywords uk
                                     WHERE uk.user_id = (<include refid="selectUserIdByEmail"/>))
             ) AS keywordRankCount;
    </select>

    <!--  유저 키워드 고정  -->
    <update id="keywordFix" parameterType="map">
        UPDATE user_keywords
        SET keyword_fix = CASE WHEN keyword_fix = 0 THEN -1 ELSE 0 END
        WHERE keyword_id = #{keywordId}
        AND user_id = (
        <include refid="selectUserIdByEmail"/>
            )
    </update>

    <!-- 블로그 모든 게시글에 해당하는 키워드 순위 -->
    <select id="selectRankKeywordByPost" parameterType="map" resultType="map">
        SELECT bp.post_no as postNo,
               kd.keyword_name as keywordName,
               kr.rank_pc as rankPc,
               kr.total_search_exposure as totalSearchExposure
        FROM blog_post bp
                 JOIN
             keyword_rank kr ON bp.post_no = kr.post_no
                 JOIN
             user_keywords uk
             ON kr.keyword_id = uk.keyword_id and uk.user_id = (<include refid="selectUserIdByEmail"/>)
                 JOIN
             keyword_dict kd ON kr.keyword_id = kd.keyword_id
        WHERE bp.blog_id = #{blogId}
        order by bp.post_no, kr.rank_pc
    </select>

        <!-- 게시글에 해당하는 키워드 순위 -->
    <select id="selectRankKeywordByPostNo" parameterType="String" resultType="KeywordDto">
        select kd.keyword_name,
               kd.month_search_pc,
               kd.month_search_mobile,
               (kd.month_search_pc + kd.month_search_mobile) as total_search,
               kr.rank_pc,
               kr.total_search_exposure
        from keyword_rank kr
                 JOIN
             keyword_dict kd on kr.keyword_id = kd.keyword_id
        WHERE kr.post_no = #{postNo}
        order by rank_pc
    </select>

    <!-- 유저별 키워드 조회(배치) -->
    <select id="findKeywordNameByUserId" parameterType="Long" resultType="KeywordDto">
        select kd.keyword_id, kd.keyword_name
        from keyword_dict kd
                 join user_keywords uk on kd.keyword_id = uk.keyword_id
        where uk.user_id = #{userId}
        order by keyword_id
    </select>

    <!-- 모든 키워드 조회(배치) -->
    <select id="findAllKeyword" resultType="KeywordDto">
        select keyword_id, keyword_name
        from keyword_dict kd
        order by keyword_id
    </select>

    <!--  키워드 검색량 업데이트(배치)  -->
    <update id="updateKeywordDict" parameterType="KeywordDto">
        update keyword_dict
        set month_search_pc     = #{monthSearchPc},
            month_search_mobile = #{monthSearchMobile}
        where keyword_id = #{keywordId}
    </update>

    <!--  키워드 순위 업데이트(배치)  -->
    <insert id="updateKeywordRank" parameterType="KeywordDto">
        INSERT INTO keyword_rank (keyword_id, rank_pc, post_no, total_search_exposure, updated_at)
        VALUES (#{keywordId}, #{rankPc}, #{postNo}, #{totalSearchExposure}, NOW())
        ON DUPLICATE KEY UPDATE rank_pc               = #{rankPc},
                                total_search_exposure = #{totalSearchExposure},
                                updated_at            = NOW()
    </insert>

    <!--  키워드 순위 데이터 삭제(배치)  -->
    <delete id="deleteRankData">
        DELETE
        FROM keyword_rank
        WHERE DATE(updated_at) != CURDATE();
    </delete>

    <!--  키워드 카테고리 이동  -->
    <update id="updateKeywordCategory" parameterType="map">
        UPDATE user_keywords
        SET category_id = #{category}
        WHERE keyword_id IN
        <foreach item="item" collection="keywordIdList" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <!--  카테고리 Name 수정  -->
    <update id="updateCategory" parameterType="map">
        UPDATE user_category
        SET category_name = #{categoryName}
        WHERE category_id = #{categoryId}
        AND user_id = (
        <include refid="selectUserIdByEmail"/>
            )
    </update>

    <!-- 카테고리 정보 조회 -->
    <select id="selectCategory" parameterType="String" resultType="KeywordDto">
        select category_id
             , category_name
        from user_category uc
        where user_id = (<include refid="selectUserIdByEmail"/>)
    </select>

</mapper>
