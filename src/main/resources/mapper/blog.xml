<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="camel.BoostMarketer.blog.mapper.BlogMapper">
    <sql id="selectUserIdByEmail">
        SELECT id FROM user WHERE email = #{email}
    </sql>

    <!--  블로그 등록  -->
    <insert id="registerBlog" parameterType="map">
        INSERT INTO blog (user_id, blog_id, blog_name, blog_img)
        SELECT (<include refid="selectUserIdByEmail"/>),
               #{blogDto.blogId},
               #{blogDto.blogName},
               #{blogDto.blogImg}
        FROM DUAL
        WHERE NOT EXISTS (SELECT 1
                          FROM blog
                          WHERE user_id = (<include refid="selectUserIdByEmail"/>)
                            and blog_id = #{blogDto.blogId})
    </insert>

    <!--  블로그 게시물 정보 등록  -->
    <insert id="registerPosts" parameterType="java.util.List">
        INSERT INTO blog_post (blog_id, post_no, post_title, post_date, hashtag) VALUES
        <foreach item="item" collection="list" separator=",">
            (#{item.blogId}, #{item.postNo, jdbcType=INTEGER}, #{item.postTitle}, #{item.postDate}, #{item.hashtag})
        </foreach>
        ON DUPLICATE KEY UPDATE updated_at = now()
    </insert>


        <!--  블로그 정보 조회  -->
    <select id="checkIfBlogExists" parameterType="String" resultType="BlogDto">
        select blog_id, blog_name, blog_img
          from blog b
         where blog_id = #{blogId}
         limit 1
    </select>

    <!--  블로그 정보 조회  -->
    <select id="selectBlogInfo" parameterType="String" resultType="BlogDto">
        SELECT bg.blog_id,
               bg.blog_name,
               bg.blog_img,
               COUNT(DISTINCT bp.post_no)                        AS post_cnt,
               DATE_FORMAT(MAX(bg.updated_at), '%Y-%m-%d %H:%i') AS UpdateDt,
               COUNT(DISTINCT CASE WHEN kr.rank_pc != 0 THEN kr.post_no END) AS top_posts_count,
               COUNT(DISTINCT CASE WHEN kr.total_search_exposure != 0 THEN kr.post_no END) AS total_search_posts_count
        FROM user u
                 JOIN
             blog bg ON u.id = bg.user_id
                 LEFT JOIN
             blog_post bp ON bg.blog_id = bp.blog_id
                 LEFT JOIN
             keyword_rank kr ON bp.post_no = kr.post_no AND kr.keyword_id IN (
                             SELECT uk.keyword_id
                             FROM user_keywords uk
                             JOIN user u ON uk.user_id = u.id
                             WHERE u.email = #{email}
                         )
        WHERE u.email = #{email}
        GROUP BY bg.blog_id, bg.blog_name, bg.blog_img, bg.created_at
        order by
        <choose>
            <when test="sort == 'general'">
                bg.created_at
            </when>
            <when test="sort == 'highPost'">
                post_cnt desc
            </when>
            <when test="sort == 'lowPost'">
                post_cnt
            </when>
            <when test="sort == 'highRank'">
                top_posts_count desc
            </when>
            <when test="sort == 'lowRank'">
                top_posts_count
            </when>
        </choose>
    </select>

    <!--  블로그 마지막 글번호 조회  -->
    <select id="selectLastPostNo" parameterType="String" resultType="String">
        SELECT MAX(post_no) AS max_post_no
        FROM blog_post
        WHERE blog_id = #{blogId}
        GROUP BY blog_id;
    </select>

    <!--  블로그 마지막 글번호 조회(다수) -->
    <select id="selectLastPostNoList" parameterType="String" resultType="CommonBlogDto">
        SELECT blog_id, MAX(post_no) AS post_no
        FROM blog_post
        where blog_id in (select blog_id
                          from blog
                          where user_id =
                                (<include refid="selectUserIdByEmail"/>))
        GROUP BY blog_id;
    </select>

    <!--  블로그 최신화 일자 갱신  -->
    <update id="blogUpdatedAt" parameterType="String">
        UPDATE blog
        SET updated_at = now()
        WHERE blog_id = #{blogId}
    </update>

    <!--  블로그 최신화 일자 갱신(다수)(배치)  -->
    <update id="allBlogUpdatedAt" parameterType="String">
        UPDATE blog
        SET updated_at = now()
        <where>
            <if test="email != null and email != ''">
                blog_id in
                (
                    select blog_id
                    from blog
                    where user_id =
                    (
                        <include refid="selectUserIdByEmail"/>
                    )
                )
            </if>
        </where>
    </update>


    <!--  블로그 삭제  -->
    <delete id="deleteBlog" parameterType="String">
        delete
        from blog
        WHERE blog_id = #{blogId}
          and user_id = (<include refid="selectUserIdByEmail"/>)
    </delete>

    <!--  블로그 글 삭제  -->
    <delete id="deleteBlogPost" parameterType="String">
        delete from blog_post
        WHERE blog_id = #{blogId}
    </delete>

    <!--  최신글 COUNT [1달] -->
    <select id="selectRecentPostCnt" parameterType="String" resultType="Integer">
        SELECT COUNT(*) cnt
        FROM blog_post bp
                 JOIN
             blog b ON bp.blog_id = b.blog_id
        WHERE b.user_id = (<include refid="selectUserIdByEmail"/>)
          AND bp.post_date >= CURDATE() - INTERVAL 1 MONTH
    </select>

    <!--  최신글 조회 [1달] -->
    <select id="selectRecentPost" parameterType="String" resultType="map">
        SELECT
        	b.blog_name as blogName,
            bp.blog_id as blogId,
            bp.post_no as postNo,
            bp.post_title as postTitle,
            bp.post_date as postDate,
            b.blog_img as blogImg,
            <![CDATA[
            COUNT(CASE WHEN rank_pc > 0 AND rank_pc <= 5 THEN 1 END)          AS rankPc5,
            COUNT(CASE WHEN rank_pc > 5 AND rank_pc <= 10 THEN 1 END)         AS rankPc10,
            COUNT(total_search_exposure) AS totalSearchExposure
            ]]>
        FROM
            blog_post bp
        JOIN
            blog b ON bp.blog_id = b.blog_id
        LEFT JOIN
            keyword_rank kr ON kr.post_no = bp.post_no AND kr.keyword_id IN (
                SELECT uk.keyword_id
                FROM user_keywords uk
                JOIN user u ON uk.user_id = u.id
                WHERE u.email = #{email}
            )
        WHERE
            b.user_id = (<include refid="selectUserIdByEmail"/>)
            AND bp.post_date >= CURDATE() - INTERVAL 1 MONTH
        GROUP BY b.blog_name, bp.blog_id, bp.post_no, bp.post_title, bp.post_date,b.blog_img
        order BY
        <choose>
            <when test="sort == 'recentPostDate'">
                post_date desc
            </when>
            <when test="sort == 'pastPostDate'">
                post_date
            </when>
            <when test="sort == 'highRank'">
                rankPc5 desc, rankPc10 desc
            </when>
            <when test="sort == 'lowRank'">
                rankPc5, rankPc10
            </when>
        </choose>

    </select>

    <!--  게시글 수, 상위노출 게시글 수  -->
    <select id="selectPostCntInfo" parameterType="String" resultType="map"><![CDATA[
        SELECT COUNT(DISTINCT bp.post_no) AS postCnt,
               COUNT(DISTINCT kr.post_no) AS topPostsCnt
        FROM user u
                 JOIN
             blog bg ON u.id = bg.user_id
                 LEFT JOIN
             blog_post bp ON bg.blog_id = bp.blog_id
                 LEFT JOIN
             keyword_rank kr ON bp.post_no = kr.post_no  AND kr.keyword_id IN (
                             SELECT uk.keyword_id
                             FROM user_keywords uk
                             JOIN user u ON uk.user_id = u.id
                             WHERE u.email = #{email}
                         )
        WHERE u.email = #{email}
    ]]></select>

    <!--  키워드 순위에 해당하는 블로그 글  -->
    <select id="getRankedBlogsByKeyword" parameterType="map" resultType="map">
        SELECT b.blog_name     as blogName,
               bp.blog_id      as blogId,
               bp.post_no      as postNo,
               bp.post_title   as postTitle,
               bp.post_date    as postDate,
               b.blog_img      as blogImg,
               kd.keyword_name as keywordName,
        COALESCE(kr.rank_pc,0) as rankPc,
       	COALESCE(kr.total_search_exposure,0)  as totalSearchExposure
        FROM blog_post bp
                 LEFT JOIN
             blog b ON bp.blog_id = b.blog_id
                 LEFT JOIN
             keyword_rank kr ON kr.post_no = bp.post_no
                 LEFT JOIN
             keyword_dict kd ON kr.keyword_id = kd.keyword_id
        WHERE b.user_id = (<include refid="selectUserIdByEmail"/>)
          and kd.keyword_id = #{keywordId}
        order BY rank_pc
    </select>

    <!--  블로그 수  -->
    <select id="selectBlogCnt" parameterType="String" resultType="Integer">
        select count(*)
        from blog b
        where user_id = (<include refid="selectUserIdByEmail"/>)
    </select>

    <!--  블로그 정보(단일) -->
    <select id="selectBlogInfoOne" parameterType="String" resultType="BlogDto">
        select blog_id, blog_name, blog_img
        from blog b
        where blog_id = #{blogId}
        LIMIT 1
    </select>

    <!--  게시글 정보(팝업창) -->
    <select id="selectPostByBlogId" parameterType="map" resultType="map">
        SELECT bp.post_no as postNo,
               bp.post_title as postTitle,
            COALESCE(bp.hashtag, '') as hashtag,
               bp.post_date as postDate
        FROM blog_post bp
                 JOIN
             keyword_rank kr ON bp.post_no = kr.post_no
                 JOIN
             user_keywords uk ON kr.keyword_id = uk.keyword_id and uk.user_id = (<include refid="selectUserIdByEmail"/>)
        WHERE bp.blog_id = #{blogId}
        GROUP BY bp.post_no, bp.post_title, bp.post_date
        order by bp.post_no desc
    </select>

    <!--  내가 등록한 블로그 ID 조회 -->
    <select id="selectBlogIdList" parameterType="String" resultType="String">
        select blog_id
        from blog b
        where user_id = (<include refid="selectUserIdByEmail"/>)
    </select>

    <!-- 글정보 가져오기 -->
    <select id="selectPostByPostNo" parameterType="String" resultType="BlogPostDto">
        select blog_id, post_no, post_title, post_date, hashtag
        from blog_post bp
        WHERE post_no = #{postNo}
    </select>

    <!-- 모든 블로그 마지막 글번호 조회(배치)  -->
    <select id="selectAllLastPostNo" resultType="BlogPostDto">
        SELECT blog_id, MAX(post_no) AS post_no
        FROM blog_post
        group by blog_id
    </select>

    <!-- 유저별 블로그ID 조회(배치)  -->
    <select id="findBlogIdByUserId" parameterType="Long" resultType="String">
        select blog_id
        from blog
        where user_id = #{userId}
    </select>

</mapper>
